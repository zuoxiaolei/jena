# Licensed under the terms of http://www.apache.org/licenses/LICENSE-2.0

## Fuseki + TDB + reasoner + full text search + geo-spatial search

@prefix :        <#> .
@prefix fuseki:  <http://jena.apache.org/fuseki#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#> .
@prefix tdb:     <http://jena.hpl.hp.com/2008/tdb#> .
@prefix ja:      <http://jena.hpl.hp.com/2005/11/Assembler#> .
@prefix text:    <http://jena.apache.org/text#> .
@prefix spatial:    <http://jena.apache.org/spatial#> .

[] a fuseki:Server ;
   # Timeout - server-wide default: milliseconds.
   # Format 1: "1000" -- 1 second timeout
   # Format 2: "10000,60000" -- 10s timeout to first result, then 60s timeout to for rest of query.
   # See java doc for ARQ.queryTimeout
   # ja:context [ ja:cxtName "arq:queryTimeout" ;  ja:cxtValue "10000" ] ;

   # ja:loadClass "your.code.Class" ;

   fuseki:services (
     #<#memory>
     <#tdb>
   ) .

# Custom code.
[] ja:loadClass "com.hp.hpl.jena.tdb.TDB" .

# TDB
tdb:DatasetTDB  rdfs:subClassOf  ja:RDFDataset .
tdb:GraphTDB    rdfs:subClassOf  ja:Model .

## ---------------------------------------------------------------
## Updatable in-memory dataset.

<#memory> a fuseki:Service ;
    # URI of the dataset -- http://host:port/memory
    fuseki:name                     "memory" ; 

    # SPARQL query services e.g. http://host:port/memory/sparql?query=...
    fuseki:serviceQuery             "sparql" ;
    fuseki:serviceQuery             "query" ;
    # SPARQL Update service -- http://host:port/memory/update?request=...
    fuseki:serviceUpdate            "update" ;   # SPARQL query service -- /memory/update

    # Upload service -- http://host:port/memory/upload?graph=default or ?graph=URI or ?default
    # followed by a multipart body, each part being RDF syntax.
    # Syntax determined by the file name extension.
    fuseki:serviceUpload            "upload" ;   # Non-SPARQL upload service

    # SPARQL Graph store protocol (read and write)
    # GET, PUT, POST DELETE to http://host:port/memory/data?graph= or ?default=
    fuseki:serviceReadWriteGraphStore      "data" ;     

    # A separate read-only graph store endpoint:
    fuseki:serviceReadGraphStore       "get" ;   # Graph store protocol (read only) -- /memory/get

    fuseki:dataset           <#mem_inf_ds> ;
    .

## In-memory, initially empty.
<#mem_inf_ds> a ja:RDFDataset ;
    ja:defaultGraph       <#mem_inf> ;
     .

# ---- RDFS Inference models
# These must be incorporate in a dataset in order to use them.
# All in one file.

<#mem_inf> a ja:InfModel ;
    rdfs:label "RDFS Inference Model" ;
    ja:baseModel 
        [ a ja:MemoryModel ;
          ja:content [ja:externalContent <file:Data/test_data_rdfs.ttl>] ;
        ] ;
    ja:reasoner
         [ ja:reasonerURL <http://jena.hpl.hp.com/2003/RDFSExptRuleReasoner> ]
    .

## ---------------------------------------------------------------
## TDB dataset.

<#tdb> a fuseki:Service ;
    fuseki:name              "db" ;             # http://host/tdb
    fuseki:serviceQuery      "sparql" ;          # SPARQL query service
    fuseki:serviceQuery      "query" ;
    fuseki:serviceUpdate     "update" ;
    fuseki:serviceUpload     "upload" ;          # Non-SPARQL upload service
    fuseki:serviceReadGraphStore    "get" ;
    fuseki:serviceReadWriteGraphStore    "data" ;
    fuseki:dataset           :spatial_dataset ;
    .

# ---- RDFS Inference models
# These must be incorporate in a dataset in order to use them.
# All in one file.
<#tdb_inf_ds> a ja:RDFDataset ;
    ja:defaultGraph       <#tdb_inf> ;
    .

<#tdb_inf> a ja:InfModel ;
    rdfs:label "RDFS Inference Model" ;
    ja:baseModel <#tdb_graph> ;
    ja:reasoner
         [ ja:reasonerURL <http://jena.hpl.hp.com/2003/RDFSExptRuleReasoner> ]
    .

<#tdb_graph> a tdb:GraphTDB ;
    tdb:dataset <#tdb_ds> .

# A TDB datset used for RDF storage
<#tdb_ds> a tdb:DatasetTDB;
    tdb:location "/home/zuoxiaolei/TDB";
    .

## Initialize text query
[] ja:loadClass       "org.apache.jena.query.text.TextQuery" .
# A TextDataset is a regular dataset with a text index.
text:TextDataset      rdfs:subClassOf   ja:RDFDataset .
# Lucene index
text:TextIndexLucene  rdfs:subClassOf   text:TextIndex .
# Solr index
#text:TextIndexSolr    rdfs:subClassOf   text:TextIndex .

## ---------------------------------------------------------------
## This URI must be fixed - it's used to assemble the text dataset.

:text_dataset a text:TextDataset ;
    text:dataset   <#tdb_inf_ds> ;
    text:index     <#textIndexLucene> ;
    .

# Text index description
<#textIndexLucene> a text:TextIndexLucene ;
    text:directory <file:/home/zuoxiaolei/TDB/lucene> ;
    ##text:directory "mem" ;
    text:entityMap <#entMap> ;
    .

# Mapping in the index
# URI stored in field "uri"
# rdfs:label is mapped to field "text"
<#entMap> a text:EntityMap ;
    text:entityField      "uri" ;
    text:defaultField     "text" ;
    text:map (
         [ text:field "text" ; text:predicate rdfs:label ]
         ) .

# Spatial
[] ja:loadClass "org.apache.jena.query.spatial.SpatialQuery" .
spatial:SpatialDataset  rdfs:subClassOf  ja:RDFDataset .
#spatial:SpatialIndexSolr  rdfs:subClassOf  spatial:SpatialIndex .
spatial:SpatialIndexLucene  rdfs:subClassOf   spatial:SpatialIndex .

## ---------------------------------------------------------------
## This URI must be fixed - it's used to assemble the spatial dataset.

:spatial_dataset a spatial:SpatialDataset ;
    spatial:dataset   :text_dataset ;
    ##spaital:index   <#indexSolr> ;
    spatial:index     <#spatialIndexLucene> ;
    .

<#spatialIndexLucene> a spatial:SpatialIndexLucene ;
    spatial:directory <file:Lucene> ;
    #spatial:directory "mem" ;
    spatial:definition <#definition> ;
    .

<#definition> a spatial:EntityDefinition ;
    spatial:entityField      "uri" ;
    spatial:geoField     "geo" ;
    # custom geo predicates for 1) Latitude/Longitude Format
    #spatial:hasSpatialPredicatePairs (
    #     [ spatial:latitude :latitude_1 ; spatial:longitude :longitude_1 ]
    #     [ spatial:latitude :latitude_2 ; spatial:longitude :longitude_2 ]
    #     ) ;
    # custom geo predicates for 2) Well Known Text (WKT) Literal
    # spatial:hasWKTPredicates (:wkt_1 :wkt_2) ;
    # custom SpatialContextFactory for 2) Well Known Text (WKT) Literal
    # spatial:spatialContextFactory
#     "com.spatial4j.core.context.jts.JtsSpatialContextFactory"
